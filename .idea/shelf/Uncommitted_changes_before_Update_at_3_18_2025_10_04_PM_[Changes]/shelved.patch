Index: src/main/java/lk/ijse/voaestheticlounge/controller/BookingController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.voaestheticlounge.controller;\r\n\r\nimport jakarta.validation.Valid;\r\nimport lk.ijse.voaestheticlounge.dto.AppoimentDTO;\r\nimport lk.ijse.voaestheticlounge.dto.ResponseDTO;\r\nimport lk.ijse.voaestheticlounge.service.BookingService;\r\nimport lk.ijse.voaestheticlounge.service.impl.BookingServiceImpl;\r\nimport lk.ijse.voaestheticlounge.util.VarList;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/v1/booking\")\r\npublic class BookingController {\r\n    @Autowired\r\n    private final BookingService bookingService;\r\n    @Autowired\r\n    private final BookingServiceImpl bookingServiceImpl;\r\n\r\n\r\n    public BookingController(BookingService bookingService, BookingServiceImpl bookingServiceImpl) {\r\n        this.bookingService = bookingService;\r\n        this.bookingServiceImpl = bookingServiceImpl;\r\n    }\r\n\r\n    @PostMapping(\"/save\")\r\n    public ResponseEntity<ResponseDTO> saveBooking(@RequestBody @Valid AppoimentDTO bookingDTO) {\r\n        bookingServiceImpl.save(bookingDTO);\r\n        return ResponseEntity.status(HttpStatus.OK)\r\n                .body(new ResponseDTO(VarList.OK, \"Booking Saved Successfully\", null));\r\n    }\r\n    @DeleteMapping(value = \"/delete/{id}\")\r\n    public ResponseEntity <ResponseDTO> deleteBooking(@PathVariable Long id) {\r\n        bookingService.delete(id);\r\n        return ResponseEntity.status(HttpStatus.OK)\r\n                .body(new ResponseDTO(VarList.OK, \"Success\", null));\r\n    }\r\n    @PutMapping(\"/update/{id}\")\r\n    public ResponseEntity<ResponseDTO> updateBooking(@PathVariable Long id, @RequestBody @Valid AppoimentDTO bookingDTO) {\r\n        bookingServiceImpl.update(id,bookingDTO);\r\n        return ResponseEntity.status(HttpStatus.OK)\r\n                .body(new ResponseDTO(VarList.OK, \"Booking Updated Successfully\", null));\r\n    }\r\n    @GetMapping(\"/getAll\")\r\n    public ResponseEntity<ResponseDTO> getAllBookings() {\r\n        return ResponseEntity.status(HttpStatus.OK)\r\n                .body(new ResponseDTO(VarList.OK, \"Success\", bookingService.getAll()));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lk/ijse/voaestheticlounge/controller/BookingController.java b/src/main/java/lk/ijse/voaestheticlounge/controller/BookingController.java
--- a/src/main/java/lk/ijse/voaestheticlounge/controller/BookingController.java	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/src/main/java/lk/ijse/voaestheticlounge/controller/BookingController.java	(date 1742315635280)
@@ -3,14 +3,22 @@
 import jakarta.validation.Valid;
 import lk.ijse.voaestheticlounge.dto.AppoimentDTO;
 import lk.ijse.voaestheticlounge.dto.ResponseDTO;
+import lk.ijse.voaestheticlounge.dto.ServiceDTO;
+import lk.ijse.voaestheticlounge.dto.UserDTO;
 import lk.ijse.voaestheticlounge.service.BookingService;
+import lk.ijse.voaestheticlounge.service.ServicesService;
 import lk.ijse.voaestheticlounge.service.impl.BookingServiceImpl;
+import lk.ijse.voaestheticlounge.service.impl.ServiceServiceImpl;
+import lk.ijse.voaestheticlounge.service.impl.UserServiceImpl;
 import lk.ijse.voaestheticlounge.util.VarList;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 
+import java.util.List;
+
+@CrossOrigin("*")
 @RestController
 @RequestMapping("/api/v1/booking")
 public class BookingController {
@@ -18,7 +26,10 @@
     private final BookingService bookingService;
     @Autowired
     private final BookingServiceImpl bookingServiceImpl;
-
+    @Autowired
+    ServiceServiceImpl serviceServiceImpl;
+    @Autowired
+    UserServiceImpl userServiceImpl;
 
     public BookingController(BookingService bookingService, BookingServiceImpl bookingServiceImpl) {
         this.bookingService = bookingService;
@@ -27,6 +38,17 @@
 
     @PostMapping("/save")
     public ResponseEntity<ResponseDTO> saveBooking(@RequestBody @Valid AppoimentDTO bookingDTO) {
+       UserDTO userDTO = userServiceImpl.findByEmail(bookingDTO.getUserEmail());
+        bookingDTO.setUserId(userDTO.getId());
+
+        ServiceDTO serviceDTO = serviceServiceImpl.findByName(bookingDTO.getServiceName());
+        bookingDTO.setServiceId(serviceDTO.getId());
+        bookingDTO.setPrice(serviceDTO.getPrice());
+        bookingDTO.setAppointmentTime(serviceDTO.getAppoimentDuration());
+
+        System.out.println(bookingDTO.getAppointmentTime());
+        System.out.println(bookingDTO.getPrice());
+        System.out.println(bookingDTO.getAppointmentTime());
         bookingServiceImpl.save(bookingDTO);
         return ResponseEntity.status(HttpStatus.OK)
                 .body(new ResponseDTO(VarList.OK, "Booking Saved Successfully", null));
@@ -45,6 +67,10 @@
     }
     @GetMapping("/getAll")
     public ResponseEntity<ResponseDTO> getAllBookings() {
+        List<AppoimentDTO> appoimentDTO = bookingServiceImpl.getAll();
+        for (AppoimentDTO fruit : appoimentDTO) {
+            System.out.println(fruit);
+        }
         return ResponseEntity.status(HttpStatus.OK)
                 .body(new ResponseDTO(VarList.OK, "Success", bookingService.getAll()));
     }
Index: src/main/java/lk/ijse/voaestheticlounge/service/impl/BookingServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.voaestheticlounge.service.impl;\r\n\r\nimport lk.ijse.voaestheticlounge.dto.AppoimentDTO;\r\n\r\nimport lk.ijse.voaestheticlounge.repo.BookingRepository;\r\nimport lk.ijse.voaestheticlounge.service.BookingService;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.modelmapper.TypeToken;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.List;\r\n@Service\r\n@Transactional\r\npublic class BookingServiceImpl implements BookingService {\r\n    @Autowired\r\n    BookingRepository bookingRepository;\r\n    @Autowired\r\n    ModelMapper modelMapper;\r\n    @Override\r\n    public void save(AppoimentDTO bookingDTO) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void delete(Long id) {\r\n        bookingRepository.deleteById(id);\r\n    }\r\n\r\n    @Override\r\n    public void update(Long id, AppoimentDTO bookingDTO) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public List<AppoimentDTO> getAll() {\r\n        return modelMapper.map(bookingRepository.findAll(),new TypeToken<List<AppoimentDTO>>() {}.getType());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lk/ijse/voaestheticlounge/service/impl/BookingServiceImpl.java b/src/main/java/lk/ijse/voaestheticlounge/service/impl/BookingServiceImpl.java
--- a/src/main/java/lk/ijse/voaestheticlounge/service/impl/BookingServiceImpl.java	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/src/main/java/lk/ijse/voaestheticlounge/service/impl/BookingServiceImpl.java	(date 1742315635315)
@@ -2,6 +2,7 @@
 
 import lk.ijse.voaestheticlounge.dto.AppoimentDTO;
 
+import lk.ijse.voaestheticlounge.entity.Bookings;
 import lk.ijse.voaestheticlounge.repo.BookingRepository;
 import lk.ijse.voaestheticlounge.service.BookingService;
 import org.modelmapper.ModelMapper;
@@ -20,7 +21,7 @@
     ModelMapper modelMapper;
     @Override
     public void save(AppoimentDTO bookingDTO) {
-
+        bookingRepository.save(modelMapper.map(bookingDTO, Bookings.class));
     }
 
     @Override
@@ -30,11 +31,33 @@
 
     @Override
     public void update(Long id, AppoimentDTO bookingDTO) {
-
+        Bookings existingBooking = bookingRepository.findById(id).orElseThrow(() -> new RuntimeException("Booking not found."));
+        bookingRepository.save(existingBooking);
     }
 
     @Override
     public List<AppoimentDTO> getAll() {
-        return modelMapper.map(bookingRepository.findAll(),new TypeToken<List<AppoimentDTO>>() {}.getType());
+        List<Bookings> bookingsList = bookingRepository.findAll();
+
+        // Print all bookings to the console (sout)
+        bookingsList.forEach(booking -> System.out.println(booking));
+
+        // If you want to print specific fields, you can do it like this:
+        bookingsList.forEach(booking -> {
+            System.out.println("ID: " + booking.getId() +
+                    ", Service Name: " + booking.getServiceName() +
+                    ", Appointment Time: " + booking.getAppointmentTime() +
+                    ", Appointment Date: " + booking.getAppointmentDate() +
+                    ", Appointment Time Duration "+booking.getAppointmentTimeDuration()+
+                    ", Price: " + booking.getPrice());
+        });
+
+        // Map the list to AppointmentDTO
+        List<AppoimentDTO> appointmentDTOs = modelMapper.map(
+                bookingsList,
+                new TypeToken<List<AppoimentDTO>>() {}.getType());
+
+        return appointmentDTOs;
+
     }
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>3.4.3</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>org.example</groupId>\r\n    <artifactId>Smart-Hotel-Booking-WebSite</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>Smart-Hotel-Booking-WebSite</name>\r\n    <description>Smart-Hotel-Booking-WebSite</description>\r\n    <url/>\r\n    <licenses>\r\n        <license/>\r\n    </licenses>\r\n    <developers>\r\n        <developer/>\r\n    </developers>\r\n    <scm>\r\n        <connection/>\r\n        <developerConnection/>\r\n        <tag/>\r\n        <url/>\r\n    </scm>\r\n    <properties>\r\n        <java.version>17</java.version>\r\n    </properties>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.mysql</groupId>\r\n            <artifactId>mysql-connector-j</artifactId>\r\n            <version>8.0.33</version>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-validation</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.jsonwebtoken</groupId>\r\n            <artifactId>jjwt-api</artifactId>\r\n            <version>0.11.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-security</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.jsonwebtoken</groupId>\r\n            <artifactId>jjwt-impl</artifactId>\r\n            <version>0.11.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.jsonwebtoken</groupId>\r\n            <artifactId>jjwt-api</artifactId>\r\n            <version>0.11.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.jsonwebtoken</groupId>\r\n            <artifactId>jjwt-impl</artifactId>\r\n            <version>0.11.5</version>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.jsonwebtoken</groupId>\r\n            <artifactId>jjwt-jackson</artifactId>\r\n            <version>0.11.5</version>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.hibernate.orm</groupId>\r\n            <artifactId>hibernate-core</artifactId>\r\n            <version>6.4.2.Final</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.security</groupId>\r\n            <artifactId>spring-security-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springdoc</groupId>\r\n            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\r\n            <version>2.3.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.modelmapper</groupId>\r\n            <artifactId>modelmapper</artifactId>\r\n            <version>3.1.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <configuration>\r\n                    <annotationProcessorPaths>\r\n                        <path>\r\n                            <groupId>org.projectlombok</groupId>\r\n                            <artifactId>lombok</artifactId>\r\n                        </path>\r\n                    </annotationProcessorPaths>\r\n                </configuration>\r\n            </plugin>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n                <configuration>\r\n                    <excludes>\r\n                        <exclude>\r\n                            <groupId>org.projectlombok</groupId>\r\n                            <artifactId>lombok</artifactId>\r\n                        </exclude>\r\n                    </excludes>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/pom.xml	(date 1742315635280)
@@ -113,7 +113,11 @@
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-thymeleaf</artifactId>
         </dependency>
-
+        <dependency>
+            <groupId>com.fasterxml.jackson.datatype</groupId>
+            <artifactId>jackson-datatype-jsr310</artifactId>
+            <version>2.12.5</version> <!-- Adjust version as needed -->
+        </dependency>
     </dependencies>
     <build>
         <plugins>
Index: src/main/java/lk/ijse/voaestheticlounge/service/impl/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.voaestheticlounge.service.impl;\r\n\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport lk.ijse.voaestheticlounge.dto.UserDTO;\r\nimport lk.ijse.voaestheticlounge.entity.User;\r\nimport lk.ijse.voaestheticlounge.repo.UserRepository;\r\nimport lk.ijse.voaestheticlounge.service.UserService;\r\nimport lk.ijse.voaestheticlounge.util.JwtUtil;\r\nimport lk.ijse.voaestheticlounge.util.VarList;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.modelmapper.TypeToken;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\n@Service\r\n@Transactional\r\npublic class UserServiceImpl implements UserService , UserDetailsService {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n    @Autowired\r\n    private ModelMapper modelMapper;\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\r\n        System.out.println(\"loadUserByUsername \"+email);\r\n        User user = userRepository.findByEmail(email);\r\n        System.out.println(\"loadUserByUsername \"+email);\r\n        return new org.springframework.security.core.userdetails.User(user.getEmail(), user.getPassword(), getAuthority(user));\r\n    }\r\n\r\n    public UserDTO loadUserDetailsByUsername(String username) throws UsernameNotFoundException {\r\n        User user = userRepository.findByEmail(username);\r\n        return modelMapper.map(user,UserDTO.class);\r\n    }\r\n    private Set<SimpleGrantedAuthority> getAuthority(User user) {\r\n        Set<SimpleGrantedAuthority> authorities = new HashSet<>();\r\n        authorities.add(new SimpleGrantedAuthority(user.getRole()));\r\n        return authorities;\r\n    }\r\n\r\n    @Override\r\n    public UserDTO searchUser(String username) {\r\n        if (userRepository.existsByEmail(username)){\r\n            User user = userRepository.findByEmail(username);\r\n            return modelMapper.map(user,UserDTO.class);\r\n\r\n        }else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void deleteUser(Long id) {\r\n        if (!userRepository.existsById(String.valueOf(id))){\r\n          throw new RuntimeException(\"user not Found\");\r\n\r\n        }\r\n        userRepository.deleteById(String.valueOf(id));\r\n    }\r\n\r\n    @Override\r\n    public void updateUserRole(String email, String newRole) {\r\n        User user = userRepository.findByEmail(String.valueOf(email));\r\n\r\n        user.setRole(newRole); // Update only the role\r\n        userRepository.save(user);\r\n\r\n    }\r\n\r\n    @Override\r\n    public List<UserDTO> getAll() {\r\n        return modelMapper.map(userRepository.findAll(),new TypeToken<List<UserDTO>>() {}.getType());\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public int saveUser(UserDTO userDTO) {\r\n        if (userRepository.existsByEmail(userDTO.getEmail())) {\r\n            return VarList.Not_Acceptable;\r\n        } else {\r\n            BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();\r\n            userDTO.setPassword(passwordEncoder.encode(userDTO.getPassword()));\r\n//            userDTO.setRole(\"USER\");\r\n            userRepository.save(modelMapper.map(userDTO, User.class));\r\n            return VarList.Created;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lk/ijse/voaestheticlounge/service/impl/UserServiceImpl.java b/src/main/java/lk/ijse/voaestheticlounge/service/impl/UserServiceImpl.java
--- a/src/main/java/lk/ijse/voaestheticlounge/service/impl/UserServiceImpl.java	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/src/main/java/lk/ijse/voaestheticlounge/service/impl/UserServiceImpl.java	(date 1742315635316)
@@ -84,6 +84,12 @@
 
     }
 
+    @Override
+    public UserDTO findByEmail(String email) {
+        User user = userRepository.findByEmail(email);
+        return modelMapper.map(user,UserDTO.class);
+    }
+
 
     @Override
     public int saveUser(UserDTO userDTO) {
Index: src/main/java/lk/ijse/voaestheticlounge/dto/AppoimentDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.voaestheticlounge.dto;\r\n\r\nimport jakarta.persistence.JoinColumn;\r\nimport jakarta.persistence.ManyToOne;\r\nimport lk.ijse.voaestheticlounge.entity.Payment;\r\nimport lk.ijse.voaestheticlounge.entity.Service;\r\nimport lk.ijse.voaestheticlounge.entity.User;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\n\r\npublic class AppoimentDTO {\r\n    private Long id;\r\n    private String  userId;\r\n    private String userEmail;\r\n    private String serviceId;\r\n    private String serviceName;\r\n    private LocalTime appoimentTime;\r\n    private LocalDate appointmentDate;\r\n    private Double price;\r\n\r\n    public AppoimentDTO() {\r\n    }\r\n\r\n    public AppoimentDTO(Long id, String userId, String userEmail, String serviceId, String serviceName, LocalTime appoimentTime, LocalDate appointmentDate, Double price) {\r\n        this.id = id;\r\n        this.userId = userId;\r\n        this.userEmail = userEmail;\r\n        this.serviceId = serviceId;\r\n        this.serviceName = serviceName;\r\n        this.appoimentTime = appoimentTime;\r\n        this.appointmentDate = appointmentDate;\r\n        this.price = price;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    public void setUserId(String userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public String getUserEmail() {\r\n        return userEmail;\r\n    }\r\n\r\n    public void setUserEmail(String userEmail) {\r\n        this.userEmail = userEmail;\r\n    }\r\n\r\n    public String getServiceId() {\r\n        return serviceId;\r\n    }\r\n\r\n    public void setServiceId(String serviceId) {\r\n        this.serviceId = serviceId;\r\n    }\r\n\r\n    public String getServiceName() {\r\n        return serviceName;\r\n    }\r\n\r\n    public void setServiceName(String serviceName) {\r\n        this.serviceName = serviceName;\r\n    }\r\n\r\n    public LocalTime getAppoimentTime() {\r\n        return appoimentTime;\r\n    }\r\n\r\n    public void setAppoimentTime(LocalTime appoimentTime) {\r\n        this.appoimentTime = appoimentTime;\r\n    }\r\n\r\n    public LocalDate getAppointmentDate() {\r\n        return appointmentDate;\r\n    }\r\n\r\n    public void setAppointmentDate(LocalDate appointmentDate) {\r\n        this.appointmentDate = appointmentDate;\r\n    }\r\n\r\n    public Double getPrice() {\r\n        return price;\r\n    }\r\n\r\n    public void setPrice(Double price) {\r\n        this.price = price;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lk/ijse/voaestheticlounge/dto/AppoimentDTO.java b/src/main/java/lk/ijse/voaestheticlounge/dto/AppoimentDTO.java
--- a/src/main/java/lk/ijse/voaestheticlounge/dto/AppoimentDTO.java	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/src/main/java/lk/ijse/voaestheticlounge/dto/AppoimentDTO.java	(date 1742315635280)
@@ -12,28 +12,31 @@
 
 public class AppoimentDTO {
     private Long id;
-    private String  userId;
+    private Long  userId;
     private String userEmail;
-    private String serviceId;
+    private Long serviceId;
     private String serviceName;
-    private LocalTime appoimentTime;
+    private LocalTime appointmentTime;
     private LocalDate appointmentDate;
+    private LocalTime appointmentTimeDuration;
     private Double price;
 
     public AppoimentDTO() {
     }
 
-    public AppoimentDTO(Long id, String userId, String userEmail, String serviceId, String serviceName, LocalTime appoimentTime, LocalDate appointmentDate, Double price) {
+    public AppoimentDTO(Long id, Long userId, String userEmail, Long serviceId, String serviceName, LocalTime appointmentTime, LocalDate appointmentDate, LocalTime appointmentTimeDuration, Double price) {
         this.id = id;
         this.userId = userId;
         this.userEmail = userEmail;
         this.serviceId = serviceId;
         this.serviceName = serviceName;
-        this.appoimentTime = appoimentTime;
+        this.appointmentTime = appointmentTime;
         this.appointmentDate = appointmentDate;
+        this.appointmentTimeDuration = appointmentTimeDuration;
         this.price = price;
     }
 
+
     public Long getId() {
         return id;
     }
@@ -42,13 +45,7 @@
         this.id = id;
     }
 
-    public String getUserId() {
-        return userId;
-    }
 
-    public void setUserId(String userId) {
-        this.userId = userId;
-    }
 
     public String getUserEmail() {
         return userEmail;
@@ -58,11 +55,35 @@
         this.userEmail = userEmail;
     }
 
-    public String getServiceId() {
+    public LocalTime getAppointmentTime() {
+        return appointmentTime;
+    }
+
+    public void setAppointmentTime(LocalTime appointmentTime) {
+        this.appointmentTime = appointmentTime;
+    }
+
+    public LocalTime getAppointmentTimeDuration() {
+        return appointmentTimeDuration;
+    }
+
+    public void setAppointmentTimeDuration(LocalTime appointmentTimeDuration) {
+        this.appointmentTimeDuration = appointmentTimeDuration;
+    }
+
+    public Long getUserId() {
+        return userId;
+    }
+
+    public void setUserId(Long userId) {
+        this.userId = userId;
+    }
+
+    public Long getServiceId() {
         return serviceId;
     }
 
-    public void setServiceId(String serviceId) {
+    public void setServiceId(Long serviceId) {
         this.serviceId = serviceId;
     }
 
@@ -74,13 +95,7 @@
         this.serviceName = serviceName;
     }
 
-    public LocalTime getAppoimentTime() {
-        return appoimentTime;
-    }
 
-    public void setAppoimentTime(LocalTime appoimentTime) {
-        this.appoimentTime = appoimentTime;
-    }
 
     public LocalDate getAppointmentDate() {
         return appointmentDate;
@@ -90,6 +105,8 @@
         this.appointmentDate = appointmentDate;
     }
 
+
+
     public Double getPrice() {
         return price;
     }
@@ -97,4 +114,5 @@
     public void setPrice(Double price) {
         this.price = price;
     }
+
 }
\ No newline at end of file
Index: src/main/java/lk/ijse/voaestheticlounge/service/ServicesService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.voaestheticlounge.service;\r\n\r\nimport lk.ijse.voaestheticlounge.dto.ServiceDTO;\r\n\r\nimport java.util.List;\r\n\r\npublic interface ServicesService {\r\n    void save(ServiceDTO serviceDTO);\r\n    void delete(Long id);\r\n    void update(Long id, ServiceDTO serviceDTO);\r\n    List<ServiceDTO> getAll();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lk/ijse/voaestheticlounge/service/ServicesService.java b/src/main/java/lk/ijse/voaestheticlounge/service/ServicesService.java
--- a/src/main/java/lk/ijse/voaestheticlounge/service/ServicesService.java	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/src/main/java/lk/ijse/voaestheticlounge/service/ServicesService.java	(date 1742315635314)
@@ -9,4 +9,5 @@
     void delete(Long id);
     void update(Long id, ServiceDTO serviceDTO);
     List<ServiceDTO> getAll();
+    ServiceDTO findByName(String name);
 }
Index: src/main/java/lk/ijse/voaestheticlounge/service/impl/ServiceServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.voaestheticlounge.service.impl;\r\n\r\nimport lk.ijse.voaestheticlounge.dto.ServiceDTO;\r\nimport lk.ijse.voaestheticlounge.repo.ServiceRepository;\r\nimport lk.ijse.voaestheticlounge.service.ServicesService;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.modelmapper.TypeToken;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\n@Transactional\r\npublic class ServiceServiceImpl implements ServicesService {\r\n    @Autowired\r\n    ServiceRepository serviceRepository;\r\n    @Autowired\r\n    ModelMapper modelMapper;\r\n    @Override\r\n    public void save(ServiceDTO serviceDTO) {\r\n        serviceRepository.save(modelMapper.map(serviceDTO, lk.ijse.voaestheticlounge.entity.Service.class));\r\n    }\r\n\r\n    @Override\r\n    public void delete(Long id) {\r\n    serviceRepository.deleteById(id);\r\n    }\r\n\r\n    @Override\r\n    public void update(Long id, ServiceDTO serviceDTO) {\r\n        lk.ijse.voaestheticlounge.entity.Service exService = serviceRepository.findById(id).orElseThrow(() -> new RuntimeException(\"Service not found with ID: \"+id));\r\n        exService.setName(serviceDTO.getName());\r\n        exService.setDescription(serviceDTO.getDescription());\r\n        exService.setPrice(serviceDTO.getPrice());\r\n        exService.setImageUrl(serviceDTO.getImageUrl());\r\n\r\n        serviceRepository.save(exService);\r\n    }\r\n\r\n    @Override\r\n    public List<ServiceDTO> getAll() {\r\n        return modelMapper.map(serviceRepository.findAll(),new TypeToken<List<ServiceDTO>>() {}.getType());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lk/ijse/voaestheticlounge/service/impl/ServiceServiceImpl.java b/src/main/java/lk/ijse/voaestheticlounge/service/impl/ServiceServiceImpl.java
--- a/src/main/java/lk/ijse/voaestheticlounge/service/impl/ServiceServiceImpl.java	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/src/main/java/lk/ijse/voaestheticlounge/service/impl/ServiceServiceImpl.java	(date 1742315635315)
@@ -44,4 +44,9 @@
     public List<ServiceDTO> getAll() {
         return modelMapper.map(serviceRepository.findAll(),new TypeToken<List<ServiceDTO>>() {}.getType());
     }
+
+    @Override
+    public ServiceDTO findByName(String name) {
+        return modelMapper.map(serviceRepository.findByName(name),ServiceDTO.class);
+    }
 }
Index: src/main/java/lk/ijse/voaestheticlounge/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.voaestheticlounge.service;\r\n\r\nimport lk.ijse.voaestheticlounge.dto.UserDTO;\r\n\r\nimport java.util.List;\r\n\r\npublic interface UserService {\r\n    int saveUser(UserDTO userDTO);\r\n    UserDTO searchUser(String username);\r\n    void deleteUser(Long id);\r\n    void updateUserRole(String email, String newRole);\r\n    List<UserDTO> getAll();\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lk/ijse/voaestheticlounge/service/UserService.java b/src/main/java/lk/ijse/voaestheticlounge/service/UserService.java
--- a/src/main/java/lk/ijse/voaestheticlounge/service/UserService.java	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/src/main/java/lk/ijse/voaestheticlounge/service/UserService.java	(date 1742315635315)
@@ -10,5 +10,6 @@
     void deleteUser(Long id);
     void updateUserRole(String email, String newRole);
     List<UserDTO> getAll();
+    UserDTO findByEmail(String email);
 
 }
Index: src/main/java/lk/ijse/voaestheticlounge/dto/UserDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.voaestheticlounge.dto;\r\n\r\npublic class UserDTO {\r\n    private String username;\r\n    private String email;\r\n    private String role;\r\n    private String password;\r\n\r\n    public UserDTO() {\r\n    }\r\n\r\n    public UserDTO(String username, String email, String role, String password) {\r\n        this.username = username;\r\n        this.email = email;\r\n        this.role = role;\r\n        this.password = password;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public String getRole() {\r\n        return role;\r\n    }\r\n\r\n    public void setRole(String role) {\r\n        this.role = role;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"UserDTO{\" +\r\n                \"username='\" + username + '\\'' +\r\n                \", email='\" + email + '\\'' +\r\n                \", role='\" + role + '\\'' +\r\n                \", password='\" + password + '\\'' +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lk/ijse/voaestheticlounge/dto/UserDTO.java b/src/main/java/lk/ijse/voaestheticlounge/dto/UserDTO.java
--- a/src/main/java/lk/ijse/voaestheticlounge/dto/UserDTO.java	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/src/main/java/lk/ijse/voaestheticlounge/dto/UserDTO.java	(date 1742315635313)
@@ -1,6 +1,7 @@
 package lk.ijse.voaestheticlounge.dto;
 
 public class UserDTO {
+    private Long id;
     private String username;
     private String email;
     private String role;
@@ -9,13 +10,22 @@
     public UserDTO() {
     }
 
-    public UserDTO(String username, String email, String role, String password) {
+    public UserDTO(Long id, String username, String email, String role, String password) {
+        this.id = id;
         this.username = username;
         this.email = email;
         this.role = role;
         this.password = password;
     }
 
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
     public String getUsername() {
         return username;
     }
Index: src/main/java/lk/ijse/voaestheticlounge/repo/ServiceRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.voaestheticlounge.repo;\r\n\r\nimport lk.ijse.voaestheticlounge.entity.Service;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface ServiceRepository extends JpaRepository<Service,Long> {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lk/ijse/voaestheticlounge/repo/ServiceRepository.java b/src/main/java/lk/ijse/voaestheticlounge/repo/ServiceRepository.java
--- a/src/main/java/lk/ijse/voaestheticlounge/repo/ServiceRepository.java	(revision dfc87191ad8598d36c91428f35390808af4d8108)
+++ b/src/main/java/lk/ijse/voaestheticlounge/repo/ServiceRepository.java	(date 1742315635314)
@@ -1,9 +1,11 @@
 package lk.ijse.voaestheticlounge.repo;
 
 import lk.ijse.voaestheticlounge.entity.Service;
+import lk.ijse.voaestheticlounge.entity.User;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
 @Repository
 public interface ServiceRepository extends JpaRepository<Service,Long> {
+    Service findByName(String name);
 }
